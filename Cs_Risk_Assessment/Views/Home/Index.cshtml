

@using Newtonsoft.Json
@model Cs_Risk_Assessment.ViewModels.ViewAssessmentDetailsDto

@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_templateLayout.cshtml";
}

@section OtherHeadContent {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

}


@if(!Model.HasValue)
{
    <h2>Please Create Assessments to get data on Dashboard</h2>
}
else
{
    <div class="row">
        <div class="col-4">
            <div class="card text-white mb-3" style="max-width: 18rem; background-color:#db8770">
                <div class="card-body my-auto text-dark">
                    <span style="font-size:35px">@Model.CriticalCount</span> <span>CRITICAL</span>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="card text-white mb-3" style="max-width: 18rem; background-color:#ebd160">
                <div class="card-body my-auto text-dark">
                    <span style="font-size:35px">@Model.HighCount</span> <span>HIGH</span>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="card text-white mb-3" style="max-width: 18rem; background-color:white">
                <div class="card-body my-auto text-dark">
                    <span style="font-size:35px">@Model.ThreatsCount</span> <span>Threats</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <canvas id="vulchart" width="800" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <canvas id="riskchart" width="800" height="200"></canvas>
                </div>
            </div>
        </div>

    </div>


    @section OtherPageScripts
    {


    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

    <script>
        const ctx = document.getElementById('vulchart');

        var top5Vuls = @Html.Raw(JsonConvert.SerializeObject(Model.Top5Vuls.Select(v => v.name).ToList()));

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: top5Vuls,
                datasets: [{
                    label: 'Top 5 Vulnerbilities',
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.Top5Vuls.Select(v => v.usage).ToList())),
                    borderWidth: 1,
                }]
            },
            options: {
                indexAxis: 'y',
                scales: {
                    y: {
                        stacked: true
                    },
                    x: {
                        stacked: true,

                    }
                },
            },
            plugins: [ChartDataLabels],
        });



    </script>

    <script>
        const ctx2 = document.getElementById('riskchart');

        var top5Threats = @Html.Raw(JsonConvert.SerializeObject(Model.top5Threats.Select(v => v.name).ToList()));
        console.log(top5Vuls)

        new Chart(ctx2, {
            type: 'bar',
            data: {
                labels: top5Threats,
                datasets: [{
                    label: 'Top 5 Risks', // Removed unnecessary array brackets around an empty string
                    data: @Html.Raw(JsonConvert.SerializeObject(Model.top5Threats.Select(v => v.usage).ToList())),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                    ],
                    borderWidth: 1,
                }]
            },
            options: {
                indexAxis: 'y',
                scales: {
                    y: {
                        // beginAtZero: true,
                        stacked: true // Added stacked option to display bars horizontally
                    },
                    x: { // Added x-axis configuration for clarity
                        stacked: true,
                        // max: 100,
                        // beginAtZero: true,

                    }
                },

                // plugins: {
                //     datalabels: {
                //         anchor: 'end',
                //         align: 'end',
                //         color: 'black',
                //         formatter: function (value, context) {
                //             return value;
                //         }
                //     }
                // }
            },
            plugins: [ChartDataLabels],
        });



    </script>

    }
}




